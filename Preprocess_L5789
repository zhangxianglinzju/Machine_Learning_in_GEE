// This part is used to import and preprocess Landsat 5, 7, 8, 9, combine them to a new collection, 
// generate the composite using maximal NDVI method and calculate some indices

// define the function
// function to converte the scale value to the real reflectance
function multiplyScale (image) { 
    var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
    return image.addBands(opticalBands, null, true)}

// function to remove the cloud
function cloudRemoval(image) { 
    var FillBitMask = (1 << 0);
    var DilatedCloudBitMask = (1 << 1);
    var CirrusBitMask = (1 << 2);
    var CloudBitMask = (1 << 3);
    var CloudShadowBitMask = (1 << 4);
    var qa = image.select('QA_PIXEL'); 
    var mask = qa.bitwiseAnd(FillBitMask).eq(0) 
                  .and(qa.bitwiseAnd(DilatedCloudBitMask).eq(0))
                  .and(qa.bitwiseAnd(CirrusBitMask).eq(0))
                  .and(qa.bitwiseAnd(CloudBitMask).eq(0))
                  .and(qa.bitwiseAnd(CloudShadowBitMask).eq(0)); 
    var saturationMask = image.select('QA_RADSAT').eq(0);
    return image.updateMask(mask)
                .updateMask(saturationMask)
                .toDouble()
                .copyProperties(image)
                .copyProperties(image, ["system:time_start"]);} 

// function to get and rename bands of interest from OLI
function renameOli(img) {
  return img.select(
      ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'],
      ['blue', 'green', 'red', 'nir', 'swir1', 'swir2']);}

// function to get and rename bands of interest from ETM+
function renameEtm(img) {
  return img.select(
      ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7'],
      ['blue', 'green', 'red', 'nir', 'swir1', 'swir2']);}

// function to calculate indices
function calcIndex(image) {
  var nir = image.select('nir');
  var red = image.select('red');  
  var swir1 = image.select('swir1');
  var swir2 = image.select('swir2');
  var ndvi = image.normalizedDifference(['nir', 'red']).rename('NDVI');
  var bsi = swir1.add(swir2).subtract(nir).subtract(red).divide(swir1.add(swir2).add(nir).add(red)).rename('BSI');
  var nbr2 = image.normalizedDifference(['swir1', 'swir2']).multiply(-1).rename('NBR2');
  var evi = image.expression('2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
      'NIR': image.select('nir'), 'RED': image.select('red'), 'BLUE': image.select('blue')}).rename('EVI')
  return image.addBands(ndvi).addBands(bsi).addBands(nbr2).addBands(evi);}

// function to adjust etm to oli
// define the conversion factors
var coefficients = {
  itcps: ee.Image.constant([0.0003, 0.0088, 0.0061, 0.0412, 0.0254, 0.0172]),
  slopes: ee.Image.constant([0.8474, 0.8483, 0.9047, 0.8462, 0.8937, 0.9071])};
function etmToOli(img) {
  return img.select(['blue', 'green', 'red', 'nir', 'swir1', 'swir2'])
      .multiply(coefficients.slopes)
      .add(coefficients.itcps)
      .toDouble()
      .copyProperties(img)
      .copyProperties(img, ["system:time_start"]);
}

// import the dataset and preprocessing
// define the filter parameter
var yearStart = 2020;
var yearEnd = 2020;
var monthStart = 5;
var monthEnd = 9;
var roi = ee.Geometry.Polygon(
        [[[-7.283728370707339, 43.342424127689846],
          [-7.283728370707339, 39.944769014774224],
          [-1.5598514175823386, 39.944769014774224],
          [-1.5598514175823386, 43.342424127689846]]], null, false)
var colFilter = ee.Filter.and(
      ee.Filter.bounds(roi), 
      ee.Filter.calendarRange(yearStart, yearEnd, 'year'),
      ee.Filter.calendarRange(monthStart, monthEnd, 'month')); 

// import the Landsat datasets
// Landsat 9
var L9Col = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')
                  .filter(colFilter)
                  .map(cloudRemoval)
                  .map(multiplyScale)
                  .map(renameOli);

// Landsat 8
var L8Col = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
                  .filter(colFilter)
                  .map(cloudRemoval)
                  .map(multiplyScale)
                  .map(renameOli);

// Landsat 7
var L7Col = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
                  .filter(colFilter)
                  .map(cloudRemoval)
                  .map(multiplyScale)
                  .map(renameEtm)
                  .map(etmToOli);
// Landsat 5
var L5Col = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
                  .filter(colFilter)
                  .map(cloudRemoval)
                  .map(multiplyScale)
                  .map(renameEtm)
                  .map(etmToOli);

// combine Landsat datasets
var landsatCombination = L9Col.merge(L8Col).merge(L7Col).merge(L5Col).sort('system:time_start');

// calculate the indices and composite the image
// calculate indices
var landsatCombinationWithNDVI = landsatCombination.map(calcIndex);

// maximal NDVI method
var maxNDVI = landsatCombinationWithNDVI.qualityMosaic('NDVI').select(['blue', 'green', 'red', 'nir', 'swir1', 'swir2', "NDVI", "EVI", "BSI", "NBR2"])
                                        .set('system:time_start', ee.Date('2019-01-01').millis()).clip(roi);
